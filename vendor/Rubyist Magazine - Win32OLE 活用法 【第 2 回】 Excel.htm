<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="ja"><head>
  <meta http-equiv="Content-Language" content="ja">
  <meta http-equiv="Content-Type" content="text/html; charset=EUC-JP">
  <meta http-equiv="Content-Script-Type" content="text/javascript; charset=euc-jp">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <meta name="generator" content="Hiki 0.9dev">
  <title>Rubyist Magazine - Win32OLE 活用法 【第 2 回】 Excel</title>
  <link rel="stylesheet" type="text/css" href="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/hiki_base.css" media="all">
  <link rel="stylesheet" type="text/css" href="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/rubima.css" media="all">
    <style type="text/css"><!--
    div.preview {
  font-size: medium;
  background-color: #fcc;
  padding-top: 0.5em;
}
div.main p img.right {
  float: right;
}
ins.added {
  background-color: #fbb;
}
del.deleted {
  background-color: #ccc;
}
div.sidebar input[type=text] {
  width:130px;
}
    --></style>
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://jp.rubyist.net/magazine/?c=rss">  <link rel="icon" type="image/png" href="http://jp.rubyist.net/favicon.png">
  <link rel="shortcut icon" type="image/x-icon" href="http://jp.rubyist.net/favicon.ico">
</head>

<body data-twttr-rendered="true">
<a name="top"> </a>
<div class="main">
  <div class="adminmenu"><span class="adminmenu"><a href="http://jp.rubyist.net/magazine/">るびま</a></span>&nbsp;
<span class="adminmenu"><a href="http://jp.rubyist.net/magazine/?c=index">ページ一覧</a></span>&nbsp;
<span class="adminmenu"><a href="http://jp.rubyist.net/magazine/?c=search">検索</a></span>&nbsp;
<span class="adminmenu"><a href="http://jp.rubyist.net/magazine/?c=recent">更新履歴</a></span>&nbsp;
<span class="adminmenu"><a href="http://jp.rubyist.net/magazine/?c=login;p=0004-Win32OLE">ログイン</a></span></div>
  <h1 class="header">Win32OLE 活用法 【第 2 回】 Excel</h1>
  <!-- social-buttons -->
  <div class="social-buttons" style="text-align:right">
    <!-- hatena bookmark button -->
    <iframe style="width: 50px; height: 20px;" title="Add this entry to Hatena Bookmark" class="hatena-bookmark-button-frame" frameborder="0" height="20" scrolling="no" width="50"></iframe>
    <script type="text/javascript" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/bookmark_button.js" charset="utf-8"></script>
    <!-- delicious bookmark button -->
    <a href="http://delicious.com/save" onclick="window.open('http://www.delicious.com/save?v=5&amp;noui&amp;jump=close&amp;url='+encodeURIComponent(location.href)+'&amp;title='+encodeURIComponent(document.title), 'delicious','toolbar=no,width=550,height=550'); return false;"><img src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/delicious.gif" alt="Delicious" style="border:none"></a>
    <!-- tweet button -->
    <iframe data-twttr-rendered="true" title="Twitter Tweet Button" style="width: 186px; height: 20px;" class="twitter-share-button twitter-count-horizontal" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/tweet_button.htm" allowtransparency="true" frameborder="0" scrolling="no"></iframe>
    <script type="text/javascript" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/widgets.js"></script>
    <!-- like button -->
    <iframe src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/like.htm" style="border:none; overflow:hidden; width:100px; height:21px;" allowtransparency="true" frameborder="0" scrolling="no"></iframe>
  </div>
  <!-- /social-buttons -->
  <div class="note">更新日時:2005/10/10 20:50:31</div>
  
  <div><div class="day">
  
  <div class="body">
    <div class="section">
      <p>書いた人：cuzic</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l0"> </a></span><span class="title">プロローグ</span></h2>
  <div class="body">
    <div class="section">
      <p>あなたは、メールボックスに溜まった Excel ファイル添付付きのメールを
見ていて、長い間うんざりとした気分を味わってきました。</p>
<p>「どうして、こんな単純な作業を俺がやらないといけないんだっ。」</p>
<p>「これくらい機械でもできるはずだっ」</p>
<p>あなたは、Excel ファイルの解析を自動的にできるようにする
スクリプトを作成する決意を固めました。</p>
<p>そして、思いました。</p>
<p>「いったい、どうすれば楽に Excel ファイルを扱えるんだろう？」</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l1"> </a></span><span class="title">はじめに</span></h2>
  <div class="body">
    <div class="section">
      <p>Excel を使ってのうんざりするような作業っていろいろありますよね。</p>
<p>Excel でデータを渡されて、それを使って行う一連の作業があるような
場合とか。
他に、何がしかのログとかデータが別にあって、それを整形したり
解析した結果を、お客さまや上司の指定で Excel で出力する
必要がある場合もあります。</p>
<p>私たちが今回学ぶ内容は、このような業務で適用できる事柄に
なります。
私たちは、今回、Excel ファイルに含まれるデータを Ruby から
扱う方法と Ruby で Excel ファイルを作成する方法について学びます。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l2"> </a></span><span class="title">今回の目的</span></h2>
  <div class="body">
    <div class="section">
      <p>これから私たちは次の内容について学びます。</p>
<ul>
<li>Excel のオブジェクトモデルの概略</li>
<li>Excel ファイルのパース</li>
<li>Excel ファイルの自動作成</li>
<li>Excel を操作するのによく使うクラスやモジュールのリスト</li>
</ul>
<p>Excel は、前回に説明した COM という技術を用いて、
外部のプログラムから利用できる形で、
部品となる COM オブジェクトを提供しています。</p>
<p>Ruby から Excel を操作するにはこれらのオブジェクトと
その関連を知らなければいけません。
したがって、最初に Excel のオブジェクトモデルに
ついて簡単に説明します。</p>
<p>その次に、今回の記事のメインである Excel ファイルをパースする
方法について説明します。
ここでは、パースする方法をいくつかに分類して、それぞれどういう
状況で適用できるのかについて説明します。
具体的にパースを行うスクリプトを紹介しながら、既存の Excel の
ファイルを、 Ruby で扱えるように読み取っていくときのコツを
共有していきたいと思います。</p>
<p>Excel ファイルの自動作成については、
Excel の特定のセルを変更していく処理について
簡単に説明します。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l3"> </a></span><span class="title">Excel のオブジェクトモデル</span></h2>
  <div class="body">
    <div class="section">
      <p>Excel のオブジェクトの中で重要なものは４つあります。</p>
<ul>
<li>Application オブジェクト</li>
<li>Workbook オブジェクト</li>
<li>Worksheet オブジェクト</li>
<li>Range オブジェクト</li>
</ul>
<img alt="excel_object_model.png" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/a_003.png" height="107" width="417">
<p>Application オブジェクトは Excel のアプリケーション自身を
表現します。実行しているアプリケーションに関する情報を提供します。</p>
<p>Workbook オブジェクトは Excel アプリケーションで開かれている
特定のブックを表現します。</p>
<p>Worksheet オブジェクトは、ブックの中の一枚のシートを表します。</p>
<p>Range オブジェクトは Excel を利用するときに最も頻繁に利用する
オブジェクトです。
Range オブジェクトはセル、行、列、１つ以上のセルのブロックを含む
範囲、さらには複数のセルにまたがるグループを表現します。
目的の範囲を Range オブジェクトとして取得することでその値や、
境界線、書式などを取得、変更できます。</p>
<p>Application オブジェクトは、Excel ブックを表現する 
Workbook オブジェクトを１個以上所有します。
そして、Workbook オブジェクトは １個以上の Worksheet
オブジェクトを所有します。
そして、Worksheet オブジェクトのの中にある任意の範囲は、
Range オブジェクトを使用して表現されることになります。</p>
<p>この所有関係が Excel のオブジェクトモデルの基本になります。</p>
<p>正確には Chart というグラフを表現するオブジェクトも含めて
考える必要があるので、この理解は正確ではありません。
しかしながらワークシートのみを扱う場合はこれで充分です。</p>
<p>Excel を操作するときはこの関係を念頭におくと分かりやすく
なります。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l4"> </a></span><span class="title">Excel ファイルのパース</span></h2>
  <div class="body">
    <div class="section">
      <p>ここまでで、Excel のオブジェクトモデルの概略を理解できました。</p>
<p>これから私たちは、Excel ファイルを実際に扱っていく方法について
学んでいきます。</p>
<p>この章では特に、 既存の Excel ファイルを Ruby でパースする
方法について学びます。</p>
<h3><a name="l5"><span class="sanchor"> </span></a>Excel ファイルの全データを出力</h3>
<p>この節では、Excel ファイルに含まれる全シートの全セルの値を
出力するスクリプトについて説明します。</p>
<p>私たちは次のことについて学びます。</p>
<ul>
<li>ファイルの絶対パスの取得方法</li>
<li>Excel ファイルの開き方</li>
<li>全ワークシートに対して処理を行う方法</li>
<li>全行、全列に対して処理を行う方法</li>
<li>ブックの閉じ方、始め処理、終わり処理のイディオム</li>
<li>セルの値の取得の仕方</li>
<li>Excel のセルの型と Ruby の型の関係</li>
</ul>
<p>それでは、まずはスクリプトを見てみましょう。このプログラムを実行するのに
必要なファイルはもう少し後に出てきますので、実行するのはちょっと待ってください。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel1.rb">excel1.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| def getAbsolutePath filename
  4|   fso = WIN32OLE.new('Scripting.FileSystemObject')
  5|   return fso.GetAbsolutePathName(filename)
  6| end
  7| filename = getAbsolutePath("sample1.xls")
  8| 
  9| xl = WIN32OLE.new('Excel.Application')
 10| 
 11| book = xl.Workbooks.Open(filename)
 12| begin
 13|   book.Worksheets.each do |sheet|
 14|     sheet.UsedRange.Rows.each do |row|
 15|       record = []
 16|       row.Columns.each do |cell|
 17|         record &lt;&lt; cell.Value
 18|       end
 19|       puts record.join(",")
 20|     end
 21|   end
 22| ensure
 23|   book.Close
 24|   xl.Quit
 25| end
</pre><p></p>
<p>このスクリプトでは、Excel 表のデータを Ruby で扱えるように読み出しています。
これを本稿では「パースする」と言います。</p>
<p>これだけのスクリプトでも説明すべきことはいろいろとあります。</p>
<p>本稿の最後によく使うクラスとメソッドの簡単な説明も
書きますので、そちらも参照してください。</p>
<pre>def getAbsolutePath filename
  fso = WIN32OLE.new('Scripting.FileSystemObject')
  return fso.GetAbsolutePathName(filename)
end
filename = getAbsolutePath("sample1.xls")</pre>
<p>順番が前後しますが、後に使う Workbooks オブジェクトの
Open メソッドでは Excel ファイルの Windows での絶対パスを
渡す必要があります。</p>
<p>Win32 ネイティブ版の Ruby であれば簡単に File::expand_path メソッドを
用いて絶対パスを取得できます。
しかしながら、Cygwin 版であればこれで得られるのは UNIX 形式の
絶対パスとなります。</p>
<p>ここでは Win32 ネイティブ版、Cygwin版の違いに関わらず絶対パスを取得する
方法として、Scripting.FileSystemObject という COM コンポーネントを
使っています。
Scripting.FileSystemObject の GetAbsolutePathName メソッドを使うことで
ファイルの絶対パスを取得することができます。</p>
<p>このようにすることで、カレントディレクトリにある Excel ファイルの
絶対パスを、Win32 ネイティブ版、Cygwin 版に関わりなく取得できます。</p>
<p>そして、ここで得た絶対パスは変数 filename に代入しています。</p>
<pre>xl = WIN32OLE.new('Excel.Application')</pre>
<p>という行で Excel.Application の COM オブジェクトを作成しています。
先ほど説明した Application オブジェクトが xl になります。</p>
<pre>book = xl.Workbooks.Open(filename)</pre>
<p>という行で、先ほど得た filename の Excel ファイルを開きます。</p>
<p>Application オブジェクト xl の Workbooks は読み取り専用のプロパティです。
プロパティというのは、COM の用語の１つです。
構文上はパブリック変数のように扱えるメソッドの一種のことを
プロパティと呼びます。
Ruby でいうと、読み取り専用のプロパティというのは attr_reader で
作るメソッド、読み取りも書き込みも可能なプロパティというのは
attr_accessor で作るメソッドに対応します。</p>
<p>Workbooks オブジェクトが持つ Open メソッドで、
既存の Excel ファイルを開くことができます。
このとき、開いた Workbook をオブジェクトを返します。
なお、新規に Excel ファイルを作成する場合は Workbooks オブジェクト
の Add メソッドを用います。</p>
<pre>book.Worksheets.each do |sheet|
  ...
end</pre>
<p>と書くことで、開いたブックのすべての Worksheet に対して
同じように処理させることができます。</p>
<p>COM オブジェクトには名前付け規則があり、
「〜s」というプロパティは「s」をとった COM オブジェクトの
コレクションオブジェクトとなることが多いです。
ここではコレクションオブジェクトというのは、簡単に
Win32OLE で each メソッドが使えるようなオブジェクトという
理解をしていてください。
ここでは、ブロック引数として渡されている sheet は、
Worksheet オブジェクトになります。</p>
<pre>  sheet.UsedRange.Rows.each do |row|
    record = []
    row.Columns.each do |cell|
      record &lt;&lt; cell.Value
    end
    puts record.join(",")
  end</pre>
<p>ここが出力を行う箇所になります。
Worksheet の UsedRange というプロパティは、
そのワークシートで使われているセルの範囲を返します。
これは Range オブジェクトになります。</p>
<p>先ほども説明したように Range オブジェクトは Excel の操作に関して
最も頻繁に用いる COM オブジェクトです。</p>
<p>このブロックでは Range オブジェクトの Rows プロパティ、
Columns プロパティ、Value プロパティを用いています。</p>
<pre>  sheet.UsedRange.Rows.each do |row|
    ...
  end</pre>
<p>と書くことで、ワークシートの使用している範囲を一行ごとに
取り出して順に処理させることができます。
ここで、 row は一行分の範囲を表現する Range オブジェクトと
なります。</p>
<pre>    row.Columns.each do |cell|
      record &lt;&lt; cell.Value
    end</pre>
<p>Range オブジェクトの Rows プロパティがその Range オブジェクトが表現する
範囲の一行ずつに対応したのに対して、Columns プロパティは
一列分のセルに対応します。</p>
<p>ここで、一行分の範囲の一列分というのは、結局セル１つに対応します。</p>
<p>そして、そのセルの値を取得するために Value プロパティを
利用しています。</p>
<p>record が一行分の一連のデータを格納する配列で、そこに
順にデータを追加しています。
そして、その後 Array#join メソッドを用いてカンマ区切りで
文字列の連結を行っています。</p>
<pre>  xl.Workbooks.Close</pre>
<p>最後に Workbooks オブジェクトの Close メソッドで開いている
すべてのブックを閉じています。
そのブックだけを閉じたい場合は、</p>
<pre>book.Close</pre>
<p>と実行しましょう。</p>
<pre>xl.Quit</pre>
<p>さらに Application オブジェクトの Quit メソッドを実行すると
Excel アプリケーションそのものを終了することができます。</p>
<p>Workbooks オブジェクトの Close メソッドと
Application オブジェクトの Quit メソッド終了時に呼び出すのは
良い習慣です。</p>
<p>前回紹介しました Internet Explorer を起動するスクリプトの
ようにアプリケーションを起動することが目的の場合は、
起動したアプリケーションを終了する必要はありません。
しかしながら今回紹介するスクリプトのような場合は、
Excel を起動した状態でスクリプトを終了するのは
望ましい動作ではありません。
Application オブジェクトの Quit メソッドを起動して、
Excel アプリケーションを終了するようにしましょう。</p>
<p>終わり処理（後始末）を書かないようなスクリプトを実行した場合は
タスクマネージャを起動すると、Excel がプロセスに
残っていることを確認できるでしょう。
正しく終わり処理を書けばこのような問題は起こりません。</p>
<p>必ず終わり処理を行わせるためには、このスクリプトのように</p>
<pre>... # 始め処理
begin
  ... # 行いたい処理
ensure
  ... # 終わり処理
end</pre>
<p>と書くことがよくあります。</p>
<p>これは、始め処理に対応する終わり処理がある場合に
よく使われるイディオムです。
また、途中で例外が発生した場合でも、終わり処理が必ず実行
されるため、安心できます。</p>
<p>説明が延々と長くなってしまいまして、すいません。
話を戻します。</p>
<p>ここで、先ほどのスクリプトをサンプルのエクセルファイルに
対して実行してみましょう。</p>
<p>ここでは、次の Excel ファイルをサンプルとして利用します。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=sample1.xls">sample1.xls</a>
<img alt="sample1.PNG" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/a.png" height="273" width="677"></p>
<p>20世紀の大きな地震の履歴を書いた Excel ファイルです。
このスクリプトを実行するときは、添付する Excel ファイルを
カレントディレクトリに置いてください。</p>
<p>すると、以下の結果が得られます。</p>
<pre>1923/09/01 00:00:00,関東大震災,7.9,142807.0,true
1994/10/04 00:00:00,北海道東方沖地震,8.1,0.0,false
1995/01/17 00:00:00,阪神淡路大震災,7.2,6418.0,true
2004/10/23 00:00:00,新潟県中越地震,6.8,37.0,true</pre>
<p>あれれ。少し変ですね。
そのまま考えれば、次のように出力されるような気がします。</p>
<pre>1923/09/01,関東大震災,7.9,142807,TRUE
1994/10/04,北海道東方沖地震,8.1,0,FALSE
1995/01/17,阪神淡路大震災,7.2,6418,TRUE
2004/10/23,新潟県中越地震,6.8,37,TRUE</pre>
<p>たとえば、Excel 表では、発生日のところ、「1923/09/01」と
入力されているところ、出力されたデータは
「1923/09/01 00:00:00」となっています。
他にも 「死者・不明者」のところが Excel では
整数のところが、「14287.0」のように最後に小数点付き
で出力されています。 </p>
<p>どうして、このような結果になったのでしょう？</p>
<p>実は、セルには内部的に表現されている型があります。
もう少し説明すると、セルの値は Variant という COM の型で
表現されており、 Variant 型の中でもそれが
どのような Variant 型かという区別があるのです。</p>
<p>Win32OLE はこの型を適切に Ruby の型へと変換します。</p>
<p>具体的には Excel での型は次のように Ruby の型に変換されます。</p>
<table border="1">
<tbody><tr><td>Excelでの型</td><td>Rubyの型
</td></tr>
<tr><td>文字列</td><td>String
</td></tr>
<tr><td>数値</td><td>Float
</td></tr>
<tr><td>日付</td><td>YYYY/mm/dd HH:MM:SS形式の String
</td></tr>
<tr><td>Boolean</td><td>true もしくは false
</td></tr>
</tbody></table>
<p>日付型が YYYY/mm/dd 形式の文字列となる理由は、Ruby の
Time クラスで表現できる値と、Excel で表現できる日付型の
範囲が異なっているからです。
Ruby の Time クラスは、1901年12月14日から2038年1月19日まで
しか表現できません。
それと違って、Excel での日付型は
100年１月１日から 9999年1月1日となっています。</p>
<p>このような問題があるため、日付型は Ruby の文字列型として
変換する形になっています。
この文字列を Ruby の Time クラスに変換するのはプログラマの
責任になっています。</p>
<p>この文字列を Ruby の Time クラスに変換することを考慮して、
さきほどのスクリプトを書き換えてみましょう。</p>
<p>そうするには、 record という配列に追加しているところを
次のように変更します。</p>
<pre>     if cell.Value.is_a?(String) &amp;&amp;
        cell.Value =~ %r(\d\d\d\d/\d\d/\d\d \d\d:\d\d:\d\d)
        begin
          record &lt;&lt; Time.mktime(*cell.Value.split(%r([:/])))
        rescue ArgumentError =&gt; e
          STDERR.puts e.inspect
        end
     else
       record &lt;&lt; cell.Value
     end</pre>
<p>%r() は知っていると思いますが、正規表現リテラルを作るための別記法です。
Time.mktime メソッドは、</p>
<pre>Time::mktime( year, mon, day, hour, min, sec)</pre>
<p>の形式の引数をとるメソッドです。
引数で指定された時刻を表現する Time オブジェクトを返します。*array 
の表現は、最後の引数の直前に * がついている場合は、その
最後の引数の値が展開されて、引数として渡されるという Ruby の
文法上のルールを利用しています。</p>
<p>なお、Time::mktime メソッドは Ruby の Time 型に変換できない場合に
ArgumentError の例外を raise します。
実際にプログラムを書くときはこの例外を捕捉するように書きましょう。</p>
<h3><a name="l6"><span class="sanchor"> </span></a>Excel ファイルのタイプごとのパース</h3>
<p>与えられた Excel ファイルのセルの内容をすべて出力する方法は
これで分かりました。</p>
<p>単純な形式の Excel のファイルをパースする場合なら、これでも
充分かもしれません。</p>
<p>しかしながら、Excel ファイルの中にあるデータを取り出せるように
なったとして、データが何についてのデータなのかはどうやって
分かるのでしょう？</p>
<p>Excel ファイルに含まれる値を取り出すことができたとしてもそれが
何の値かが分からなければ意味がありません。</p>
<p>日常的に業務で流れてくる Excel ファイルというのは、
なかなかそう単純な形式ではないものですよね。
人間が目で見れば分かるけれども、コンピュータで処理しにくいような形式であったり
します。</p>
<p>本稿では、あるデータがどういうデータなのかを調べる方法として、
次の３つの方法について紹介します。</p>
<ul>
<li>カラムが決まればどのような値かが決まる場合</li>
<li>同一カラムの上の方に、見出しがあり、見出しの文字列からどのような値かが決まる場合</li>
<li>境界線から、見出しの位置が導かれ、そのセルがどのような値かが決まる場合</li>
</ul>
<p>これから、これらの場合について順に学んでいきます。</p>
<h4><a name="l7"> </a>カラムが決まればどのような値かが決まる場合</h4>
<p>きれいなマトリックスで書かれているような Excel ファイルは
比較的簡単にパースできます。
そうでなくても、列が決まれば、そのセルが何についての情報が格納されている
かが決まるような場合には、それに基づいてスクリプトを書けば
Excel ファイルをパースしていけます。</p>
<p>この場合は、簡単にパースするスクリプトを書くことができます。</p>
<p>この節では次の項目について説明します。</p>
<ul>
<li>Worksheet の中で特定の行、列の値を取得する方法</li>
<li>module および Object#extendの利用</li>
<li>複数引数の [] メソッドの定義</li>
<li>アクティブなオブジェクトの簡単な参照方法</li>
</ul>
<p>次のスクリプトは、さきほどのサンプルの Excel ファイルをこのパターンで
パースしていきます。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel2.rb">excel2.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| module Worksheet
  4|   def [] y,x
  5|     self.Cells.Item(y,x).Value
  6|   end
  7| end
  8| 
  9| def getAbsolutePath filename
 10|   fso = WIN32OLE.new('Scripting.FileSystemObject')
 11|   return fso.GetAbsolutePathName(filename)
 12| end
 13| filename = getAbsolutePath("sample1.xls")
 14| 
 15| xl = WIN32OLE.new('Excel.Application')
 16| 
 17| begin
 18|   xl.Workbooks.Open(filename)
 19|   sheet = xl.Worksheets.Item("Sheet1")
 20|   sheet.extend Worksheet
 21|   
 22|   recordset = []
 23|   2.upto(5) do |y|
 24|     record = {}
 25|     1.upto(5) do |x|
 26|       v = sheet[y,x]
 27|       title = sheet[1,x]
 28|       record[title] = v
 29|     end
 30|     recordset &lt;&lt; record
 31|   end
 32| 
 33|   recordset.each do |record|
 34|     puts record.map{|title,value| 
 35|       "#{title}=#{value}"
 36|     }.join(",")
 37|   end
 38| ensure
 39|   xl.Workbooks.Close
 40|   xl.Quit
 41| end
</pre><p></p>
<p>上記スクリプトは、まず Worksheet モジュールをあらかじめ定義しています。</p>
<pre>module Worksheet
  def [] y,x
    self.Cells.Item(y,x).Value
  end
end
</pre>
<p>Worksheet オブジェクトの sheet.Cells.Item(y,x).Value という一連の
呼び出しで、y 番目の行で x 番目の列に対応するセルの値を
取得できます。最初の行は、１番目で、１から順に数え上げます。
なお、あまり知られていないかもしれませんが Ruby では [] メソッドに
対して、複数の引数を指定できます。</p>
<pre>sheet = book.Worksheets.Item("Sheet1")</pre>
<p>という行は、Work オブジェクトのプロパティメソッド Worksheets を用いて、
Worksheets コレクションを取得しています。
そして、 "Sheet1" に対応する Worksheet オブジェクトを取得しています。</p>
<p>なお、参考までにここでは代わりに</p>
<pre>sheet = xl.Worksheets.Item("Sheet1")</pre>
<p>と書くこともできます。試してみてください。</p>
<p>Application オブジェクトの Worksheets プロパティを使うと
アクティブな Workbook のオブジェクトの Worksheets プロパティ
と同じオブジェクトを返します。
こういうアクティブなオブジェクトのプロパティを操作できるようにする
ショートカットは、Office アプリケーションオブジェクトモデルでは
しばしば提供されます。</p>
<p>Workbooks オブジェクトの Open メソッドを用いると
既存のブックを開き、その Workbook オブジェクトを返します。
このとき、その Workbook オブジェクトを ActiveWorkbook と
なるため、xl.Worksheets と書いてもうまく動作するわけです。
これについての詳細は、
<a href="http://www.microsoft.com/japan/msdn/columns/office/office01042001.asp" class="external">エクセレントな Office の冒険</a>
を参照してください。</p>
<p>話を戻します。一般にコレクションでは、
Item メソッドで特定のオブジェクトを取得できます。
ここでは、 Worksheets がコレクションで、Sheet1 という名前の
ワークシートを book.Worksheets.Item("Sheet1") で取得しています。</p>
<p>このスクリプトでは、明示的に範囲指定を行っています。
2.upto(5) や 1.upto(5) などといった箇所です。
このやり方は、自分で制御しやすい書き方です。
先ほど紹介しました UsedRange を用いる方法とどちらが良いかは
状況によって異なります。
明示的に範囲指定を行うことが容易である場合はこの方法を
使用すると良いでしょう。</p>
<p>このスクリプトは 1 行目に見出しがあることを前提としています。</p>
<pre>    title = sheet[1,x]</pre>
<p>そして、その見出しを title に代入しています。
このように ある行に見出しがあることを前提とできることは多いでしょう。</p>
<p>これをキーとして、ハッシュへと代入させています。
今回はたまたまある行に見出しがあることを前提として title を取得させて
いますが、そうではない場合もあります。
このときは、行番号と見出しとの対応表をあらかじめ Ruby のソースコード中に
持たせて、見出しに対応する行を探す方法もあります。
その方法について簡単に次の節で紹介します。</p>
<p>これからパースしようとする Excel 表を見ながら工夫しつつ、アプローチを
考えていきましょう。</p>
<p>出力のところでは、Enumerable#map や Enumerable#join を使って、簡潔に
書いています。</p>
<pre>   recordset.each do |record|
     puts record.map{|title,value|
       "#{title}=#{value}"
     }.join(",")
   end</pre>
<p>Hash#map は、Enumerable モジュールで定義されている map メソッドを
呼び出します。
Enumerable#map メソッドは each と同じ引数をとり、要素に対してブロックを
評価した結果を配列で返します。
そして、Array#join メソッドによって、Hash の内容を "," でつなげています。</p>
<p>このような配列演算は最初は慣れないかもしれませんが、
簡潔に書けるという利点があります。
私は好きです。</p>
<h4><a name="l8"> </a>見出しを使ったパース</h4>
<p>何列目のセルかということで、何のデータが含まれているかを決定できれば
先ほどのやり方でよいですが、そう簡単な Excel ファイルばかりでは
ありません。</p>
<p>例えば、１枚のワークシートに複数のテーブルがあって、
同一の列が複数の使われ方をしている場合もあります。
１枚のワークシートに複数の同じ形式の表があって、
それぞれに対して、何列目かを列挙することが面倒な場合もあるでしょう。</p>
<p>このような場合は、たとえばあるセルから、同一カラムで何行か上の
セルに見出しがあるので、この見出しの文字列をパースするときに
利用したいということもあるでしょう。</p>
<p>この場合は、見出しの文字列をあらかじめ配列に入れておき、
そのセルを起点に何行か上にマッチする見出しがあるかどうかを
探索することで、パースするというやり方があります。</p>
<p>同じように先ほどの sample1.xls を使えば次のようなスクリプト
になります。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel3.rb">excel3.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| module Worksheet
  4|   def [] y,x
  5|     self.Cells.Item(y,x).Value
  6|   end
  7| 
  8|   def getTitle(y,x,titles)
  9|     while y &gt; 0
 10|       v = self[y,x]
 11|       if titles.include?(v)
 12|         return v
 13|       end
 14|       y -= 1
 15|     end
 16|     return nil
 17|   end
 18| end
 19| 
 20| def getAbsolutePath filename
 21|   fso = WIN32OLE.new('Scripting.FileSystemObject')
 22|   return fso.GetAbsolutePathName(filename)
 23| end
 24| 
 25| def openExcelWorkbook filename
 26|   filename = getAbsolutePath(filename)
 27| 
 28|   xl = WIN32OLE.new('Excel.Application')
 29|   book = xl.Workbooks.Open(filename)
 30|   begin
 31|     yield book
 32|   ensure
 33|     xl.Workbooks.Close
 34|     xl.Quit
 35|   end
 36| end
 37| 
 38| openExcelWorkbook("sample1.xls") do |book|
 39|   sheet = book.Worksheets.Item("Sheet1")
 40|   sheet.extend Worksheet
 41|   
 42|   recordset = []
 43|   
 44|   titles = ["発生日","名称","マグニチュード","死者・不明者","死者の有無"]
 45|   2.upto(5) do |y|
 46|     record = {}
 47|     1.upto(5) do |x|
 48|       v = sheet[y,x]
 49|       title = sheet.getTitle(y,x,titles)
 50|       record[title] = v     if title
 51|     end
 52|     recordset &lt;&lt; record
 53|   end
 54| 
 55|   recordset.each do |record|
 56|     puts record.map{|title,value| 
 57|       "#{title}=#{value}"
 58|     }.join(",")
 59|   end
 60| end
</pre><p></p>
<p>このスクリプトの重要な部分は titles への代入と getTitle メソッドです。
そして、始め処理終わり処理のイディオムを yield を使うメソッドで
実現する方法も学びます。</p>
<pre>  titles = ["発生日","名称","マグニチュード","死者・不明者","死者の有無"]</pre>
<p>で、見出しの配列をあらかじめ、 titles に代入しています。</p>
<p>そして  Worksheet モジュールで定義された  getTitle というメソッドを
使って、そのセルが何に使われているかを特定しています。</p>
<pre>  def getTitle(x,y,titles)
    while y &gt; 0
      v = self[y,x]
      if titles.include?(v)
        return v
      end
      y -= 1
    end
    return nil
  end</pre>
<p>getTitle というメソッドでは、そのセルの位置から順に上へと
見出しとなりうる値があるのかどうかを調べています。
これは、今回単純に１つずつ順に上へと調べているので、行数が増えると
どんどん時間がかかることになっています。
工夫の余地があります。</p>
<p>あなたの手元の Excel ファイルを見ながら、改良して使ってください。</p>
<p>このスクリプトではもう１つ新しい要素があります。
始め処理終わり処理のイディオムを yield を使った
メソッドとして抜き出しているという点です。
このスクリプトでは今までそのまま書き下ろしていた、
ワークブックを開き、終了する動作を別のメソッドで定義しています。</p>
<pre> def openExcelWorkbook filename
   filename = getAbsolutePath(filename)

   xl = WIN32OLE.new('Excel.Application')
   book = xl.Workbooks.Open(filename)
   begin
     yield book
   ensure
     xl.Workbooks.Close
     xl.Quit
   end
 end</pre>
<p>このようにすることで、始め処理と終わり処理を
近い位置に書くことができます。
始め処理と終わり処理は互いに関連しています。
その２つが近い位置にあると見通しが良い
分かりやすくスクリプトになります。</p>
<p>始め処理を行ったのちに必ずある終わり処理を行わなければ
いけない状況というのは、多いものです。
このテクニックは応用範囲が広く覚える価値があります。</p>
<h4><a name="l9"> </a>境界線を元にセルの情報を取得</h4>
<p>境界線がテーブルの情報を取得するのに、非常に大事な場合も
あります。</p>
<p>きれいな Excel ファイルであれば上記の方法でパースできると
思います。
しかし場合によっては、Excel 表の境界線の罫線の種別が
何かということをヒントにしてスクリプトを書くと、
楽に書ける場合があります。</p>
<p>このような場合は、えてして非常に非定型な形式となります。
そのため、具体的な場合については説明することは
ここではしません。</p>
<p>そこで、この節では一般的な境界線の種別を得る方法を中心に
学んでいきます。
この節で学ぶ内容は次のとおりです。</p>
<ul>
<li>A1,B2 といった形式でセルの Range オブジェクトを取得する方法</li>
<li>COM コンポーネントで定義された定数をロードする方法</li>
<li>Win32OLE での COM コンポーネントの定数の命名規則</li>
<li>モジュールに定義された定数を取得する方法</li>
<li>||= という初期化時のイディオム</li>
<li>%w() リテラルによる文字列配列の生成</li>
</ul>
<p>このスクリプトは、あるセルを囲む境界線の線種や線の太さに対応する
定数名を返します。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel4.rb">excel4.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| module Border
  4|   def linetype
  5|     @@linestyles ||= nil
  6|     if @@linestyles.nil?
  7|       @@linestyles = {}
  8|       %w(XlContinuous XlDash XlDashDot 
  9|          XlDashDotDot XlDot XlDouble 
 10|          XlLineStyleNone XlSlantDashDot).each do |linestyle|
 11|         v = Border.const_get(linestyle)
 12|         @@linestyles[v] = linestyle
 13|       end
 14|     end
 15|     return @@linestyles.fetch(self.LineStyle) {|key| key}
 16|   end
 17| 
 18|   def lineweight
 19|     @@lineweights ||= nil
 20|     if @@lineweights.nil?
 21|       @@linewights = {}
 22|       %w(XlHairline XlMedium
 23|          XlThick XlThin).each do |weight|
 24|         v = Border.const_get(weight)
 25|         @@linewights[v] = weight
 26|       end
 27|     end
 28|     return @@linewights.fetch(self.Weight) {|key| key }
 29|   end
 30| end
 31| 
 32| def getAbsolutePath filename
 33|   fso = WIN32OLE.new('Scripting.FileSystemObject')
 34|   return fso.GetAbsolutePathName(filename)
 35| end
 36| 
 37| def openExcelWorkbook filename
 38|   filename = getAbsolutePath(filename)
 39| 
 40|   xl = WIN32OLE.new('Excel.Application')
 41|   book = xl.Workbooks.Open(filename)
 42|   begin
 43|     yield book
 44|   ensure
 45|     xl.Workbooks.Close
 46|     xl.Quit
 47|   end
 48| end
 49| 
 50| openExcelWorkbook("sample2.xls") do |book|
 51|   sheet = book.Worksheets.Item("Sheet1")
 52|   cell = sheet.Range("B2")
 53| 
 54|   borders = cell.Borders 
 55|   WIN32OLE.const_load(borders,Border)
 56|   
 57|   [["上" , Border::XlEdgeTop],
 58|    ["右" , Border::XlEdgeRight],
 59|    ["下" , Border::XlEdgeBottom],
 60|    ["左" , Border::XlEdgeLeft],
 61|   ].each do |direction,index|
 62|     border = borders.Item(index)
 63|     border.extend Border
 64|     puts "#{direction} #{border.linetype} #{border.lineweight}"
 65|   end
 66| end
</pre><p></p>
<p>このスクリプトでは Worksheet オブジェクトの Range メソッドで
セルの値を取得しています。</p>
<pre>cell = sheet.Range("B2")</pre>
<p>この B2 といった記法は Excel ファイルの扱いに慣れた方であれば
すぐに分かるでしょう。
２列目２行目のセルを表現する Range オブジェクトを取得しています。</p>
<p>境界線について調べるには Border オブジェクトを使用します。
Border オブジェクトを取得するには、Range オブジェクトの
Borders プロパティによって取得できるコレクションオブジェクト
を使います。</p>
<pre>borders = cell.Borders</pre>
<pre>  border = borders.Item(index)</pre>
<p>Borders オブジェクトはセルの上下左右の境界線を表現する
Border オブジェクトを格納するコレクションオブジェクトです。</p>
<p>セルを囲むどの境界線を取り出すかは Borders オブジェクトの
Item メソッドに何を引数として渡すかで決まります。</p>
<p>そして、線種や線の太さを調べるには、Border オブジェクトの
LineStyle プロパティや Weight プロパティを使用します。</p>
<p>LineStyle プロパティの値によってその境界線の線種が分かり、
Weight プロパティによって線の太さが分かります。
それぞれの線種ごとに定数が割り当てられていますので、
その定数をスクリプト中に直接書くことによって線種や線の太さを
調べることもできます。
定数の値は、オブジェクトブラウザを使えば、簡単に
調べることができます。</p>
<p>しかしながら、通常はもっと良い方法があります。
COM コンポーネントで定義された定数を利用する方法です。
Excel のような Office アプリケーションではさまざまな用途で
定数が使われています。</p>
<p>COM コンポーネントで定義された定数を使うことで、より
分かりやすいプログラムを書くことができます。</p>
<p>この COM コンポーネントで定義された定数を Ruby のクラスや
モジュールにロードするために WIN32OLE::const_load 
メソッドを使います。</p>
<pre>WIN32OLE.const_load(borders,Border)</pre>
<p>この行で Border モジュールに borders という COM オブジェクトで
使われている定数がロードされます。</p>
<p>今回のスクリプトでは、セルの中でどの境界線を取り出すかを指定するとき
や、そして境界線の線種や線の太さを区別するために定数をロードしています。</p>
<p>例えば、セルの周りのどの境界線かを区別するための定数の名前と値は
次のようになります。この値はオブジェクトブラウザを使うことで
確認できます。</p>
<table border="1">
<tbody><tr><td>定数名</td><td>説明</td><td>値
</td></tr>
<tr><td>xlEdgeLeft</td><td>左の境界線</td><td>7
</td></tr>
<tr><td>xlEdgeTop</td><td>上の境界線</td><td>8
</td></tr>
<tr><td>xlEdgeBottom</td><td>下の境界線</td><td>9
</td></tr>
<tr><td>xlEdgeRight</td><td>右の境界線</td><td>10
</td></tr>
</tbody></table>
<p>ここで定数名がすべて小文字から始まっています。
Ruby で定義される定数は Ruby の文法上 大文字から始まります。
そのため、COM コンポーネントで定義された定数名の最初の文字が
小文字の場合は、そのままでは Ruby の定数とできません。</p>
<p>この制限があるため、Win32OLEではある工夫をしています。
定数名の最初の文字を大文字にしているのです。</p>
<p>たとえば、COM コンポーネントで "xlEdgeTop" という変数は、
"XlEdgeTop" という変数名になります。</p>
<pre>WIN32OLE.const_load(borders,Border)</pre>
<p>WIN32OLE::const_load メソッドの第二引数は モジュール/クラス
になります。
Ruby は動的なプログラミング言語で、実行中にモジュールに
定数の定義を追加することもできるという特徴があります。
この特徴を利用して、ここでは Border というモジュールに定数の定義
を追加しています。</p>
<p>このようにロードした定数は、普通の Ruby の定数と同じように</p>
<pre>Border::XlEdgeTop</pre>
<p>などという形で使えます。</p>
<p>こうして得られた定数を使って、境界線ごとにその境界線の
線種や線の太さを調べるのがさきほどのスクリプトとなります。</p>
<p>この節の最後に linetype メソッドで使っているテクニックについて
簡単に説明します。</p>
<pre>    @@linestyles ||= nil</pre>
<p>という行は、 @@linestyles が未定義か偽ならば nil を代入しています。
初期化時のイディオムとしてよく使われるテクニックです。</p>
<pre>      %w(XlContinuous XlDash XlDashDot
         XlDashDotDot XlDot XlDouble
         XlLineStyleNone XlSlantDashDot).each do |linestyle|</pre>
<p>%w() は文字列配列を作るためのリテラル記法のひとつです。</p>
<pre>        v = Border.const_get(linestyle)</pre>
<p>Module#const_get メソッドを使うと、そのモジュールで定義された
定数を取得できます。</p>
<p>入力サンプルとして使用した Excel ファイルは次のものです。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=sample2.xls">sample2.xls</a>
<img alt="sample2.PNG" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/a_002.png" height="324" width="621"></p>
<p>カレントディレクトリに sample2.xls を置いて、このスクリプトを実行
してください。
このスクリプトの実行結果は次のようになります。</p>
<pre>上 XlContinuous XlThin
右 XlContinuous XlThin
下 XlContinuous XlThin
左 XlContinuous XlThin</pre>
<p>取得するセルを変えながらいろいろと実験してみてください。</p>
<h3><a name="l10"><span class="sanchor"> </span></a>連結セルの扱い</h3>
<p>ここまで、取り上げてきませんでしたが、Excel のセルの中には
複数のセルを結合させたものがあります。</p>
<p>結合されたセルの場合は、値を取得するときに工夫が必要です。</p>
<p>下記のスクリプトは、今まで利用してきた Worksheet モジュールを
連結セルの値を取得するように改変したサンプルです。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel5.rb">excel5.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| module Worksheet
  4|   def [] y,x
  5|     cell = self.Cells.Item(y,x)
  6|     if cell.MergeCells
  7|       cell.MergeArea.Item(1,1).Value
  8|     else
  9|       cell.Value
 10|     end
 11|   end
 12| end
 13| 
 14| def getAbsolutePath filename
 15|   fso = WIN32OLE.new('Scripting.FileSystemObject')
 16|   return fso.GetAbsolutePathName(filename)
 17| end
 18| 
 19| def openExcelWorkbook filename
 20|   filename = getAbsolutePath(filename)
 21| 
 22|   xl = WIN32OLE.new('Excel.Application')
 23|   book = xl.Workbooks.Open(filename)
 24|   begin
 25|     yield book
 26|   ensure
 27|     xl.Workbooks.Close
 28|     xl.Quit
 29|   end
 30| end
 31| 
 32| openExcelWorkbook("sample2.xls") do |book|
 33|   sheet = book.Worksheets.Item("Sheet1")
 34|   sheet.extend Worksheet
 35|   puts sheet[7,2]
 36|   puts sheet[7,3]
 37| end
</pre><p></p>
<p>このスクリプトで重要なのは、下記の箇所です。</p>
<pre>  def [] y,x
    cell = self.Cells.Item(y,x)
    if cell.MergeCells
      cell.MergeArea.Item(1,1).Value
    else
      cell.Value
    end
  end</pre>
<p>Range オブジェクトの MergeCells プロパティは そのセルが
結合されていれば true を、結合されていなければ、false を返します。</p>
<p>Range オブジェクトの MergeArea プロパティは、セルが結合
されている場合、そのセルを含む結合範囲の Range オブジェクトを
返します。</p>
<p>結合されたセルを表現する Range オブジェクトの場合は、
Item(1,1) で取り出せるセルの値が結合されたセルの値と
なります。</p>
<p>これはこういうものだと理解してください。</p>
<h3><a name="l11"><span class="sanchor"> </span></a>Excel ファイルをパースするときの私のやり方</h3>
<p>これまで、Excel ファイルをパースする方法について学んできました。</p>
<p>この節では筆者が Excel ファイルをパースするときのやり方について
簡単に整理して紹介しようと思います。</p>
<p>まず、私はパースするときの心構えとしてできる限り
単純に行うということを重視します。
これは、必要以上に一般的にしたり、難しく作ったりしない
ということです。</p>
<p>どれくらいが必要かは、例えばそのスクリプトが使い捨てなのか
今後も継続して使うのかといったことで判断します。
この違いで実装方針というのは、大きく変わります。</p>
<p>使い捨てであれば、遅くてもかまわないですし、多少保守性が
悪くなっても問題はありません。とにかく結果が早く得られる
ことを考えます。
そこで、Excel ファイルを分析して
決めうちで処理を行う実装をしたりします。
Excel ファイルに手を入れて、あらかじめ作成するスクリプトの
例外事項を少なくすることも考えます。
例外的な値やセルの順があると、パースするのが急に難しくなります。
それを条件分岐として実装することもできますが、それよりも
Excel ファイルをあらかじめ編集しておく方が楽なこともあります。</p>
<p>継続して使いそうな場合はまず見通しよく実装します。
Excel ファイルを事前に編集しなくても正しくパースできる程度には、
実装を行います。定期的に前処理を行うことは面倒だからです。</p>
<p>また、Excel ファイルを作成している人と調整して、
スクリプトを楽に作成できるように Excel ファイルの形式を
整えてもらうこともあります。</p>
<p>ひたむきにプログラミングすることだけが、目的を達成するための
方法ではありません。</p>
<p>私は単純なやり方をとります。
その方が保守性も高く簡単に作れるからです。</p>
<p>どの方法が一番単純かは、Excel ファイルがどのような形式かで
決まります。</p>
<p>これから私が考える単純さについて簡単に書きます。
個人的な方針として、次の２点を大切にしています。</p>
<ul>
<li>条件分岐の数を減らす</li>
<li>状態への参照を減らす</li>
</ul>
<p>ここで「状態への参照」というのはここでの説明のために
私が導入したフレーズで、説明が難しいです。
例えば、あるセルがあってそのセルの見出しを同じ列から探し出す
ときは、そのセルの状態を参照しようとしているわけです。
一行前のパースした結果を記憶して、今の行のパースに利用する
ような場合も状態への参照が増えているような感じがしてしまいます。</p>
<p>状態を参照することで柔軟性が増し、適用範囲を広げることができます。
条件分岐についても同様で、多くすればそれまで例外的であった部分にも
適用できるようになり、柔軟性が高まります。</p>
<p>条件分岐のないプログラムを書けることは稀でしょう。
同じように完全に状態を参照しなくてもいいような場合もないでしょう。
そういうときは、CSV に出力するだけで事が足りることも多く、
改めてスクリプトを書く必要もありません。</p>
<p>しかしながら、あまりに多くなってくると複雑になってるな、
嫌だなと感じます。
例外的な場合に対応しようとすると、条件分岐を行う必要もありますし、
条件分岐を行うために、今まで利用していなかった状態への参照が
必要になってしまいがちです。</p>
<p>Excel ファイルのパースに関して言うと、今ある Excel ファイルを
パースできれば充分なことが多く、それ以上に適用範囲を広げる努力は
あまり報われないように思います。
むしろ、突発的に生じる例外的な場合には、例外的なセルの使い方が
あったということが分かることの方が大事だったりします。</p>
<p>説明が下手ですいませんが、この節では私のやり方・指針について紹介しました。
みなさんに合わない点もあるかもしれません。
皆さんも自分に合ったやり方、基準を見つけていってください。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l12"> </a></span><span class="title">Excel ファイルの自動作成</span></h2>
  <div class="body">
    <div class="section">
      <p>ここまで、パースする方法について学んできました。
この章では、Excel ファイルを自動作成する方法について
学びます。</p>
<p>自動作成のために必要な知識は、セルの値を更新することです。</p>
<p>この章で説明することは多くありません。
次の項目になります。</p>
<ul>
<li>ワークシートの特定の位置の値の更新</li>
<li>現在のワークブックの保存</li>
<li>[]= メソッドに複数引数が使えること</li>
</ul>
<p>下記のスクリプトは、セルの値を更新できるように、Worksheet モジュールを
拡張しています。
このスクリプトを実行するときは、sample2.xls を開いている場合は
すべて閉じてから行ってください。</p>
<p><a href="http://jp.rubyist.net/magazine/?c=plugin;plugin=attach_download;p=0004-Win32OLE;file_name=excel6.rb">excel6.rb</a>
</p><pre>  1| require 'win32ole'
  2| 
  3| module Worksheet
  4|   def [] y,x
  5|     cell = self.Cells.Item(y,x)
  6|     if cell.MergeCells
  7|       cell.MergeArea.Item(1,1).Value
  8|     else
  9|       cell.Value
 10|     end
 11|   end
 12| 
 13|   def []= y,x,value
 14|     cell = self.Cells.Item(y,x)
 15|     if cell.MergeCells
 16|       cell.MergeArea.Item(1,1).Value = value
 17|     else
 18|       cell.Value = value
 19|     end
 20|   end
 21| end
 22| 
 23| def getAbsolutePath filename
 24|   fso = WIN32OLE.new('Scripting.FileSystemObject')
 25|   return fso.GetAbsolutePathName(filename)
 26| end
 27| 
 28| def openExcelWorkbook filename
 29|   filename = getAbsolutePath(filename)
 30| 
 31|   xl = WIN32OLE.new('Excel.Application')
 32|   xl.Visible = true
 33|   book = xl.Workbooks.Open(filename)
 34|   begin
 35|     yield book
 36|   ensure
 37|     xl.Workbooks.Close
 38|     xl.Quit
 39|   end
 40| end
 41| 
 42| openExcelWorkbook("sample2.xls") do |book|
 43|   sheet = book.Worksheets.Item(2)
 44|   sheet.extend Worksheet
 45| 
 46|   sheet[2,2] = "Ruby"
 47|   sheet[2,3] = "Python"
 48|   sheet[2,4] = "Perl"
 49|   book.Save
 50| end
 51| 
</pre><p></p>
<p>このスクリプトは、さきほどと同じ sample2.xls を
カレントディレクトリに置いて実行します。
すると、２枚目のシートのセルに "Ruby", "Python", "Perl" という
文字列を書き込みます。
このプログラムを実行すると、Excel を終了させるので、sample2.xls を開きなおして確認してみてください。</p>
<p>このスクリプトで説明するべきことは []= メソッドの定義のところだけです。</p>
<pre>  def []= y,x,value
    cell = self.Cells.Item(y,x)
    if cell.MergeCells
      cell.MergeArea.Item(1,1).Value = value
    else
      cell.Value = value
    end
  end</pre>
<p>Ruby の文法では  []= メソッドは、[] メソッドと同じ様に複数の引数をとることが
できます。
この機能を利用して、セルの値を更新できるように、[]= メソッドを定義しています。</p>
<p>ここで定義した []= メソッドでは、連結セルかどうかを判定しています。
連結セルの場合は、その連結セルの値を更新します。</p>
<p>Appliction オブジェクトの ActiveWorkbook プロパティは、現在アクティブな
Workbook オブジェクトを返します。
そして、Workbook オブジェクトの Save メソッドを使うことで、保存できます。
名前をつけて保存するときは、 SaveAs メソッドを使います。</p>
<p>このスクリプトが動かない場合は、すでに　sample2.xls を開いていないか
を確認してください。</p>
<p>ほかに境界線を編集する場合は、先ほども使いました Borders プロパティを
使うことでできます。</p>
<p>筆者は、あらかじめ境界線を引いた Excel ファイルを用意して、
作成するスクリプトでの処理は、そのセルの値を更新するだけにします。
境界線まで自動作成するのは、手間がかかるからです。</p>
<p>セルの値を変更できれば、充分なことは多いでしょう。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l13"> </a></span><span class="title">よく使うオブジェクトとメソッド</span></h2>
  <div class="body">
    <div class="section">
      <p>ここまで、Excel ファイルをパースしたり、自動作成したりする
スクリプトについて説明してきました。
Excel 関係で使用可能なオブジェクトは非常に数多くあります。
しかし、その中でよく使うものは極々一部です。</p>
<p>そこで、よく使うオブジェクトとメソッドについてこの章で簡単に
説明します。</p>
<p>どのような引数をとるかや、実際の使い方については Visual Basic の
ヘルプや Google で検索した内容を参照してください。</p>
<p>Excel 関係の COM オブジェクトでよく使うオブジェクトは次のものです。</p>
<table border="1">
<tbody><tr><td>オブジェクト</td><td>説明
</td></tr>
<tr><td>Application</td><td>Workbook や Window、各種イベントの取得ができる
</td></tr>
<tr><td>Workbooks</td><td>Workbook のコレクションオブジェクト
</td></tr>
<tr><td>Workbook</td><td>ファイルを開いたり、保存したりできる
</td></tr>
<tr><td>Worksheets</td><td>Worksheet のコレクションオブジェクト
</td></tr>
<tr><td>Worksheet</td><td>ワークシートの名前、Range を取得できる
</td></tr>
<tr><td>Range</td><td>セルの値の取得、プロパティの設定ができる。
</td></tr>
</tbody></table>
<h3><a name="l14"><span class="sanchor"> </span></a>Application オブジェクト</h3>
<table border="1">
<tbody><tr><td>Visible</td><td> 可視属性。Visible = true とすることでウィンドウを表示できる
</td></tr>
<tr><td>Workbooks</td><td> Workbook のコレクション
</td></tr>
<tr><td>Windows</td><td> Window のコレクション
</td></tr>
<tr><td>ActiveWorkbook</td><td> アクティブな Workbook を返す
</td></tr>
<tr><td>Worksheets</td><td> アクティブな Workbook の Worksheets を返す。
</td></tr>
</tbody></table>
<h3><a name="l15"><span class="sanchor"> </span></a>Workbooks オブジェクト</h3>
<table border="1">
<tbody><tr><td>Add</td><td>新しい Workbook を追加
</td></tr>
<tr><td>Open</td><td>既存のWorkbook を開く
</td></tr>
<tr><td>Close</td><td>すべての Workbook を閉じる
</td></tr>
</tbody></table>
<h3><a name="l16"><span class="sanchor"> </span></a>Workbook オブジェクト</h3>
<table border="1">
<tbody><tr><td>Save</td><td> Workbook を保存する
</td></tr>
<tr><td>SaveAs</td><td> Workbook を保存する。多数の引数がある。
</td></tr>
<tr><td>PrintOut</td><td>Workbookを印刷する 
</td></tr>
<tr><td>Close</td><td> Workbook を閉じる
</td></tr>
<tr><td>Worksheets</td><td> Worksheet のコレクション。Sheet1 という名前の Worksheet にアクセスするには、aWorksheets.Item("Sheet1") とする。
</td></tr>
</tbody></table>
<h3><a name="l17"><span class="sanchor"> </span></a>Worksheet オブジェクト</h3>
<table border="1">
<tbody><tr><td> Range </td><td> 
セルや複数のセルの集合を返すプロパティ。引数としては、"A1"や"A1:B2"といった文字列形式。
sheet.Range(sheet.Cells(1,1),sheet(2,2)といった指定もできる。他にセルに名前をつけている場合は、
sheet.Range("名前") といった形もできる。
</td></tr>
<tr><td>Cells </td><td> ワークシートのセルの集合を返すプロパティ。
</td></tr>
<tr><td>Name</td><td>ワークシートの名前を取得したり、変更したりできる。
</td></tr>
</tbody></table>
<h3><a name="l18"><span class="sanchor"> </span></a>Range オブジェクト</h3>
<table border="1">
<tbody><tr><td>Value</td><td>セルの値。範囲の場合はセルの値の配列。
</td></tr>
<tr><td>Borders</td><td> セルの境界線を示す
</td></tr>
<tr><td>Height</td><td>セルの高さを返す(Integer)
</td></tr>
<tr><td>Width</td><td>セルの幅(Double）
</td></tr>
<tr><td>Row</td><td>Rangeオブジェクトの行の座標を返す
</td></tr>
<tr><td>Column</td><td>Rangeオブジェクトの列の座標を返す
</td></tr>
<tr><td>MergeCells</td><td> そのセルが結合されているかどうかを返す。(true/false)
</td></tr>
<tr><td>Count</td><td>Rangeオブジェクトに含まれた範囲のセルの数を返す
</td></tr>
<tr><td>Rows</td><td>行で切り出した Range オブジェクト
</td></tr>
<tr><td>Columns</td><td>列で切り出した Range オブジェクト
</td></tr>
<tr><td>Merge</td><td>セルの結合を行うメソッド
</td></tr>
</tbody></table>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l19"> </a></span><span class="title">まとめ</span></h2>
  <div class="body">
    <div class="section">
      <p>今回は、Ruby で Excel ファイルを扱う方法について学びました。
Excel ファイルを扱う方法はここに紹介してきた以外にもいろいろあります。</p>
<p>これまでの内容でパースや自動作成といった場合には対応できると
思いますが、Excel にはまだまださまざまな機能があります。
今回紹介した内容ではまったく網羅できてはいないでしょう。</p>
<p>そのような場合は、前回紹介したように、オブジェクトブラウザを
使ったり VBA での操作の解説のページなどを参考にしてください。
また、Excel の場合は特にキーボードマクロを保存して、
結果としてできた Visual Basic のスクリプトを眺めれば
かなり参考になります。</p>
<p>創意工夫しながら、自分のやりたいことを実現していきましょう。</p>
<p>(アドバイザー：arton、助田 雅紀) </p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l20"> </a></span><span class="title">エピローグ</span></h2>
  <div class="body">
    <div class="section">
      <p>「できた！」
この一日、あなたは、憂鬱な Excel ファイルと付き合ってきた日々とサヨナラを言うために、
慣れない Win32OLE プログラミングに取り組んできました。
そして今、Excel ファイルをパースするスクリプトを書き上げたのです。</p>
<p>セルに想定外のデータが入っていた箇所があったりしてデバッグにも苦労していましたが、
今度の実行結果を見ていると、問題なく動いています。</p>
<p>これからは、今までのあの憂鬱な作業から解放されると思うとそれだけで
気分が晴々としてきました。</p>
<p>「やったぞ！」</p>
<p>あなたがやり遂げたことを同僚に説明していると、自分が誇らしく思えてきました。
単純な作業を繰り返していたときには達成感という気持ちがあることも忘れて
しまっていたことに気がつきました。</p>
<p>そして、もっとよくしていきたいなと思いながら結果を見ていたあなたは
こんなふうに思いました。</p>
<p>「これをデータベース化して今までよりもっと楽に簡単に扱えるようにならないかな？」</p>
<p>（つづく）</p>
<p>次号では、Win32OLE でデータベースを扱う方法について学んでいきます。
ご期待ください。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l21"> </a></span><span class="title">作者について</span></h2>
  <div class="body">
    <div class="section">
      <p>cuzic が Ruby を始めたのは2000年くらいです。</p>
<p>cuzic は Windows + Cygwin + Emacs の環境での開発を好み、
スポーツジム通いを続けるプログラマーです。</p>
<p>作者への連絡先は cuzic atmark cuzic.com です。</p>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l22"> </a></span><span class="title">参考　</span></h2>
  <div class="body">
    <div class="section">
      <ul>
<li><a href="http://www.microsoft.com/japan/msdn/library/default.asp?url=/japan/msdn/library/ja/dv_wrcore/html/wrconexcelobjectmodeloverview.asp" class="external">Excelオブジェクトモデルの概要</a></li>
<li><a href="http://www.microsoft.com/japan/msdn/library/default.asp?url=/japan/msdn/library/ja/dv_wrcore/html/wrtskhowtorefertoworksheetrangesincode.asp" class="external">方法 : コード内でワークシートの範囲を参照する</a></li>
</ul>
    </div>
  </div>
</div>
<div class="day">
  <h2><span class="date"><a name="l23"> </a></span><span class="title">Win32OLE 活用法 連載一覧</span></h2>
  <div class="body">
    <div class="section">
      <ul>
<li><a href="http://jp.rubyist.net/magazine/?0003-Win32OLE">Win32OLE 活用法 【第 1 回】 Win32OLE ことはじめ</a>
</li><li><strong>Win32OLE 活用法 【第 2 回】 Excel</strong>
</li><li><a href="http://jp.rubyist.net/magazine/?0005-Win32OLE">Win32OLE 活用法 【第 3 回】 ADODB</a>
</li><li><a href="http://jp.rubyist.net/magazine/?0006-Win32OLE">Win32OLE 活用法 【第 4 回】 Adobe Illustrator</a>
</li><li><a href="http://jp.rubyist.net/magazine/?0007-Win32OLE">Win32OLE 活用法 【第 5 回】 Outlook</a>
</li><li><a href="http://jp.rubyist.net/magazine/?0008-Win32OLE">Win32OLE 活用法 【第 6 回】 Web 自動巡回</a>
</li><li><a href="http://jp.rubyist.net/magazine/?0009-Win32OLE">Win32OLE 活用法 【第 7 回】 ほかの言語での COM</a>
</li></ul>
    </div>
  </div>
</div>
</div>
  <div class="day">
    <div class="comment">
      <div class="caption">
        キーワード:<br>
        参照:[<a href="http://jp.rubyist.net/magazine/?0004">Rubyist Magazine 0004 号</a>] [<a href="http://jp.rubyist.net/magazine/?0004-RubyEventCheck">0004-RubyEventCheck</a>] [<a href="http://jp.rubyist.net/magazine/?VolumeIndices">各号目次</a>] <br>
        
      </div>
    </div>
    
  </div>
</div>

<hr style="display: none">
<div class="sidebar">
  <form action="./" method="get">
  <input name="key" size="15" type="text">
  <input name="comment" value="検索" type="submit">
  <input name="c" value="search" type="hidden">
</form>

<h4><a name="s0"> </a><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn">2.0.0 Special (En)</a></h4>
<ul>
<li><ul>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-release">Release progress</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-kwarg">Keyword arg</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-lazy">Lazy</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-refinement">Refinements</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-dtrace">Dtrace</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-gc">GC</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-require">require</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-note">Notes &amp; other features</a></li>
<li><a href="http://jp.rubyist.net/magazine/?Ruby200SpecialEn-193">Stable version</a></li>
</ul></li>
</ul>
<h4><a name="s1"> </a><a href="http://jp.rubyist.net/magazine/?0041">0041号 (2013-02)</a></h4>
<ul>
<li><a href="http://jp.rubyist.net/magazine/?0041-ForeWord">巻頭言</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-Hotlinks">Rubyist Hotlinks 樽家さん</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special">2.0.0 リリース特集</a><ul>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-release">リリースの経緯</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-kwarg">キーワード引数</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-lazy">Lazy</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-refinement">Refinements</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-dtrace">Dtrace</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-gc">GCの改善</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-require">requireの改善</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-note">注意点・その他新機能</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-200Special-193">安定版の保守</a></li>
</ul></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-RailsTheBadParts">RoR: The Bad Parts</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-CodePostMortem">コードの感想戦【第２回】</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-YarvManiacs">YarvManiacs</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-Euroko2012">Euruko 2012</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-RubyTaiwan2012">RubyTaiwan2012</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-TokyoRubyKaigi10Report_1st">東京 Ruby 会議 10</a></li>
<li><a href="http://jp.rubyist.net/magazine/?FirstStepRuby">Rubyの歩き方</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki/RubyEventCheck" class="external">RubyEventCheck</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0041-EditorsNote">編集後記</a></li>
</ul>
<h4><a name="s2"> </a>バックナンバー</h4>
<ul>
<li><a href="http://jp.rubyist.net/magazine/?VolumeIndices">各号目次</a></li>
<li><a href="http://jp.rubyist.net/magazine/?CategoryIndices">分野別目次</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0040">0040号 (2012-11)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0039">0039号 (2012-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?AnnounceRubyKaja">RubyKajaのご紹介</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0038">0038号 (2012-05)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0037">0037号 (2012-02)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0036">0036号 (2011-11)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0035">0035号 (2011-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?preRubyKaigi2011">RubyKaigi2011直前特集号</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0034">0034号 (2011-06)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0033">0033号 (2011-04)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0032">0032号 (2011-01)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0031">0031号 (2010-10)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?preRubyKaigi2010">RubyKaigi2010直前特集号</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0030">0030号 (2010-06)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0029">0029号 (2010-03)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0028">0028号 (2009-12)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0027">0027号 (2009-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0026">0026号 (2009-06)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0025">0025号 (2009-02)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0024">0024号 (2008-10)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0023">0023号 (2008-03)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0022">0022号 (2007-12)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0021">0021号 (2007-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0020">0020号 (2007-08)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0019">0019号 (2007-05)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0018">0018号 (2007-02)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0017">0017号 (2006-11)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0016">0016号 (2006-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0015">0015号 (2006-07)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?RubyKaigi2006">RubyKaigi2006特別号</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0014">0014号 (2006-05)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0013">0013号 (2006-02)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0012">0012号 (2005-12)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0011">0011号 (2005-11)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0010">0010号 (2005-10)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0009">0009号 (2005-09)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0008">0008号 (2005-07)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0007">0007号 (2005-06)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0006">0006号 (2005-05)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0005">0005号 (2005-02)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0004">0004号 (2004-12)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0003">0003号 (2004-11)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0002">0002号 (2004-10)</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0001">0001号 (2004-09)</a></li>
</ul>
<h4><a name="s3"> </a>リンク</h4>
<ul>
<li><a href="http://www.ruby-lang.org/" class="external">オブジェクト指向言語Ruby</a></li>
<li><a href="http://jp.rubyist.net/" class="external">日本Rubyの会</a></li>
</ul>
<p><a href="http://jp.rubyist.net/magazine/"><img class="rubima_logo" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/rubima_logo.png" alt="るびま" height="82" width="135"></a>
<a href="http://jp.rubyist.net/"><img class="rubynokai" src="Rubyist%20Magazine%20-%20Win32OLE%20%E6%B4%BB%E7%94%A8%E6%B3%95%20%E3%80%90%E7%AC%AC%202%20%E5%9B%9E%E3%80%91%20Excel_files/rubynokai01.png" alt="日本 Ruby の会" height="31" width="88"></a></p>

</div>

<div class="footer">Generated by <a href="http://hikiwiki.org/">Hiki</a> 0.9dev (2009-08-24).<br>
Powered by <a href="http://www.ruby-lang.org/">Ruby</a> 1.8.7-p302 (2010-08-16).<br>
Founded by RubiMa Editors.<br>
</div>


</body></html>